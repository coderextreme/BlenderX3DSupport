:py:mod:`x3dv_blender_export`
=============================

.. py:module:: x3dv_blender_export

.. autoapi-nested-parse::

   This script exports to X3D format.

   Usage:
   Run this script from "File->Export" menu.  A pop-up will ask whether you
   want to export only selected or all relevant objects.

   Known issues:
       Doesn't handle multiple materials (don't use material indices);<br>
       Doesn't handle multiple UV textures on a single mesh (create a mesh for each texture);<br>
       Can't get the texture array associated with material * not the UV ones;



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   x3dv_blender_export.clamp_color
   x3dv_blender_export.matrix_direction_neg_z
   x3dv_blender_export.prefix_quoted_str
   x3dv_blender_export.suffix_quoted_str
   x3dv_blender_export.prefix_str
   x3dv_blender_export.suffix_str
   x3dv_blender_export.bool_as_str
   x3dv_blender_export.clean_def
   x3dv_blender_export.build_hierarchy
   x3dv_blender_export.export
   x3dv_blender_export.gzip_open_utf8
   x3dv_blender_export.save_OLD
   x3dv_blender_export.save
   x3dv_blender_export.__is_empty_collection
   x3dv_blender_export.__write_file
   x3dv_blender_export.__notify_start
   x3dv_blender_export.__notify_end



Attributes
~~~~~~~~~~

.. autoapisummary::

   x3dv_blender_export.JointsSegments
   x3dv_blender_export.H3D_TOP_LEVEL
   x3dv_blender_export.H3D_CAMERA_FOLLOW
   x3dv_blender_export.H3D_VIEW_MATRIX
   x3dv_blender_export.HANIM_DEF_PREFIX


.. py:data:: JointsSegments

   

.. py:data:: H3D_TOP_LEVEL
   :value: 'TOP_LEVEL_TI'

   

.. py:data:: H3D_CAMERA_FOLLOW
   :value: 'CAMERA_FOLLOW_TRANSFORM'

   

.. py:data:: H3D_VIEW_MATRIX
   :value: 'view_matrix'

   

.. py:data:: HANIM_DEF_PREFIX
   :value: 'hanim_'

   

.. py:function:: clamp_color(col)


.. py:function:: matrix_direction_neg_z(matrix)


.. py:function:: prefix_quoted_str(value, prefix)


.. py:function:: suffix_quoted_str(value, suffix)


.. py:function:: prefix_str(value, prefix)


.. py:function:: suffix_str(value, suffix)


.. py:function:: bool_as_str(value)


.. py:function:: clean_def(txt)


.. py:function:: build_hierarchy(objects)

   returns parent child relationships, skipping
       


.. py:function:: export(context, x3dv_export_settings)

   file,
   global_matrix,
   depsgraph,
   scene,
   view_layer,
   use_mesh_modifiers=False,
   use_selection=True,
   use_triangulate=False,
   use_normals=False,
   use_hierarchy=True,
   use_h3d=False,
   path_mode='AUTO',
   name_decorations=True,
   ):


.. py:function:: gzip_open_utf8(filepath, mode)

   Workaround for py3k only allowing binary gzip writing


.. py:function:: save_OLD(context, x3dv_export_settings)

   filepath,
   *,
   use_selection=True,
   use_mesh_modifiers=False,
   use_triangulate=False,
   use_normals=False,
   use_compress=False,
   use_hierarchy=True,
   use_h3d=False,
   global_matrix=None,
   path_mode='AUTO',
   name_decorations=True
   ):


.. py:function:: save(context, export_settings)

   Start the x3dv export and saves to content file.


.. py:function:: __is_empty_collection(value)


.. py:function:: __write_file(blob, export_settings)


.. py:function:: __notify_start(context)


.. py:function:: __notify_end(context, elapsed)


